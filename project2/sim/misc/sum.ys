#Rulin Huang 5140379001
# Execution begins at address 0
			.pos 	0		
init:	
			irmovl 	Stack, %esp	    # Set up stack pointer
			irmovl 	Stack, %ebp	    # Set up base pointer
			call 	Main		    # Execute main program
			halt				    # Terminate program

# Sample linked list
.align 4
ele1:
			.long 0x00a
			.long ele2
ele2:
			.long 0x0b0
			.long ele3
ele3:
			.long 0xc00
			.long 0

Main:		
			pushl	%ebp
			rrmovl	%esp, %ebp
			irmovl	ele1, %eax
			pushl	%eax
			call 	sum_list
			rrmovl	%ebp, %esp
			popl	%ebp
			ret

#long sum_list(list_ptr ls)

sum_list:	
			pushl	%ebp
			rrmovl	%esp, %ebp
			mrmovl	8(%ebp), %ecx	# %ecx = ele1
									# ebp+8 for the first parameter
									# ebp->ebp+0
									# return address ->ebp + 4 
			xorl	%eax, %eax		# sum = 0
			andl	%ecx, %ecx		# set condition codes
			je		End

Loop:		
			mrmovl	(%ecx), %esi	# get *ls
			addl	%esi, %eax		# add to sum
			mrmovl 	4(%ecx), %ecx 	# ls->next
			andl	%ecx, %ecx 		# set condition codes
			jne		Loop

End:		
			rrmovl	%ebp, %esp
			popl	%ebp
			ret

# The stack starts here and grows to lower addresser
			.pos	0x100
Stack:
